== 1.7.1 / 2014-06-12

* Minor enhancements:
  * Renamed Colour::RGB::BeccaPurple to Colour::RGB::RebeccaPurple as stipulated
    by Eric Meyer. http://meyerweb.com/eric/thoughts/2014/06/19/rebeccapurple/
    For purposes of backwards compatibility, the previous name is still
    permitted, but its use is strongly discouraged, and it will be removed in
    the Colour 2.0 release.

== 1.7 / 2014-06-12

* Minor enhancements:
  * Added Colour::RGB::BeccaPurple (#663399) in honour of Rebecca Meyer, the
    daughter of Eric Meyer, who passed away on the 7th of June, 2014. Her
    favourite colour was purple. #663399becca
    https://twitter.com/meyerweb/status/476089708674428929
    http://www.zeldman.com/2014/06/10/the-color-purple/
    http://discourse.specifiction.org/t/name-663399-becca-purple-in-css4-color/225

* Bug fixes:
  * Changed the homepage in the gem to point to github.com instead of
    RubyForge, which has been shut down. Fixes #10, reported by @voxik.

== 1.6 / 2014-05-19

* Major enhancements:
  * Aaron Hill (@armahillo) implemented the CIE Delta E 94 method by which an
    RGB colour can be asked for the closest matching colour from a list of
    provided colours. Fixes #5.
  * To implement #closest_match and #delta_e94, conversion methods for sRGB to
    XYZ and XYZ to L*a*b* space were implemented. These should be considered
    experimental.

* Tooling fixes:
  * Ensured that the gem manifest was up-to-date. Fixes #4 reported by @boutil.
    Thanks!
  * Fixed problems with Travis builds. Note that Ruby 1.9.2 is no longer
    tested. Rubinius remains in a “failure-tolerated” mode.
  * Colour 1.6 is, barring security patches, the last release of Colour that will
    support Ruby 1.8.

== 1.5.1 / 2014-01-28

* colour 1.5 was a yanked release.

* Minor enhancements:
  * Added new methods to Colour::RGB to make it so that the default defined
    colours can be looked up by hex, name, or both.
  * Added a method to Colour::RGB to extract colours from text by hex, name, or
    both.
  * Added new common methods for colour names. Converted colours do not retain
    names.
  * Restructured colour comparisons to use protocols instead of custom
    implementations. This makes it easier to implement new colour classes. To
    make this work, colour classes should +include+ Colour only need to implement
    <tt>#coerce(other)</tt>, <tt>#to_a</tt>, and supported conversion methods
    (e.g., <tt>#to_rgb</tt>).
  * Added @daveheitzman’s initial implementation of an RGB contrast method as
    an extension file: <tt>require 'colour/rgb/contrast'</tt>. This method and
    the value it returns should be considered experimental; it requires further
    examination to ensure that the results produced are consistent with the
    contrast comparisons used in Colour::Palette::MonoContrast.
  * Reducing duplicated code.

* Bug Fixes:
  * Moved +lib/colour/rgb-colours.rb+ to +lib/colour/rgb/colours.rb+. This should
    have no impact in general.
  * Improved the way that named colours are specified internally.
  * Fixed bugs with Ruby 1.8.7 that may have been introduced in colour 1.4.2.

* Tooling Changes:
  * Added simplecov for test coverage analysis.
  * Modernized Travis CI support.

== 1.4.2 / 2013-06-30

Maintenance:
* Modernized Hoe installation of Colour, removing some dependencies.
* Switched to Minitest.
* Turned on Travis CI.
* Started using Code Climate.
* Small code formatting cleanup that touched pretty much every file.

== 1.4.1 / 2010-02-03

* Imported to github.
* Converted to Hoe 2.5 spec format.

== 1.4.0 / 2007-02-11

* Merged Austin Ziegler's colour-tools library (previously part of the Ruby
  PDF Tools project) with Matt Lyon's colour library.
  - The HSL implementation from the Colour class has been merged into
    Colour::HSL. Colour is a module the way it was for colour-tools.
  - A thin veneer has been written to allow Colour::new to return a Colour::HSL
    instance; Colour::HSL supports as many methods as possible that were
    previously supported by the Colour class.
  - Values that were previously rounded by Colour are no longer rounded;
    fractional values matter.
* Converted to hoe for project management.
* Moved to the next step of deprecating Colour::Name values; printing a
  warning for each use (see the history for colour-tools 1.3.0).
* Print a warning on the access of either VERSION or COLOUR_TOOLS_VERSION; the
  version constant is now COLOUR_VERSION.
* Added humanized versions of accessors (e.g., CMYK colours now have both #cyan
  and #c to access the cyan component of the colour; #cyan provides the value
  as a percentage).
* Added CSS3 formatters for RGB, RGBA, HSL, and HSLA outputs. Note that the
  Colour library does not yet have a way of setting alpha opacity, so the
  output for RGBA and HSLA are at full alpha opacity (1.0). The values are
  output with two decimal places.
* Applied a patch to provide simple arithmetic colour addition and subtraction
  to Colour::GrayScale and Colour::RGB. The patch was contributed by Jeremy
  Hinegardner <jeremy@hinegardner.org>. This patch also provides the ability to
  return the maximum RGB value as a grayscale colour.
* Fixed two problems reported by Jean Krohn <jb.krohn@free.fr> against
  colour-tools relating to RGB-to-HSL and HSL-to-RGB conversion. (Colour and
  colour-tools use the same formulas, but the ordering of the calculations is
  slightly different with Colour and did not suffer from this problem;
  colour-tools was more sensitive to floating-point values and precision
  errors.)
* Fixed an issue with HSL/RGB conversions reported by Adam Johnson
  <adam.sven.johnson@gmail.com>.
* Added an Adobe Colour swatch (Photoshop) palette reader,
  Colour::Palette::AdobeColour (for .aco files only).

== Colour 0.1.0 / 2006-08-05

* Added HSL (degree, percent, percent) interface.
* Removed RGB instance variable; colour is managed internally as HSL floating
  point.
* Tests!

== colour-tools 1.3.0

* Added new metallic colours suggested by Jim Freeze <jfn@freeze.org>. These
  are in the namespace Colour::Metallic.
* Colours that were defined in the Colour namespace (e.g., Colour::Red,
  Colour::AliceBlue) are now defined in Colour::RGB (e.g., Colour::RGB::Red,
  Colour::RGB::AliceBlue). They are added back to the Colour namespace on the
  first use of the old colours and a warning is printed. In version 1.4, this
  warning will be printed on every use of the old colours. In version 1.5,
  the backwards compatible support for colours like Colour::Red will be
  removed completely.
* Added the Colour::CSS module, colour/css or Colour::CSS that provides a name
  lookup of Colour::RGB-namespaced constants with Colour::CSS[name]. Most of
  these colours (which are mirrored from the Colour::RGB default colours) are
  only "officially" recognised under the CSS3 colour module or SVG.
* Added the Colour::HSL colour space and some helper utilities to Colour::RGB
  for colour manipulation using the HSL value.
* Controlled internal value replacement to be between 0 and 1 for all
  colours.
* Updated Colour::Palette::Gimp to more meaningfully deal with duplicate named
  colours. Named colours now return an array of colours.
* Indicated the plans for some methods and constants out to colour-tools 2.0.
* Added unit tests and fixed a number of hidden bugs because of them.

== colour-tools 1.2.0
* Changed installer from a custom-written install.rb to setup.rb
  3.3.1-modified.
* Added Colour::GreyScale (or Colour::GrayScale).
* Added Colour::YIQ. This colour definition is incomplete; it does not have
  conversions from YIQ to other colour spaces.

== colour-tools 1.1.0

* Added colour/palette/gimp to support the reading and use of GIMP colour
  palettes.

== colour-tools 1.0.0

* Initial release.
